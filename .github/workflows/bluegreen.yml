on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "src/BgApp/**"
      - "test/BgApp.Tests/**"
      - ".github/workflows/bluegreen.yml"

name: Blue-Green Deployment
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    #chekout the code
    - name: Checkout
      uses: actions/checkout@main

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build the app
    - name: Build
      run: dotnet build --no-restore

    - name: Run tests
      run: dotnet test --no-build

  deploy:
    runs-on: ubuntu-latest
    steps:

    #chekout the code
    - name: Checkout
      uses: actions/checkout@main

    # Login to Azure
    - name: Login via Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Set params based on the existing app deployment
    - name: Set params
      id: params
      env:
        GITHUB_OUTPUT: ${{ github.workspace }}/output.txt
        GITHUB_SHA: ${{ github.sha }}
        RESOURCE_GROUP: ${{ vars.AZURE_RG }}
        APP_NAME: ${{ vars.AZURE_APP_NAME }}
      run: ./infrastructure/set-params.sh
      shell: bash

    # Deploy current commit id to a non-production label so it can be tested
    - name: Deploy current release
      id: deploy
      uses: azure/arm-deploy@v2
      with:
        scope: resourcegroup
        resourceGroupName: ${{ vars.AZURE_RG }}
        template: infrastructure/bicep/deploy-container-apps.bicep
        deploymentName: deploy-${{ steps.params.outputs.commit_id }}
        parameters: 'bgServiceName=${{ vars.AZURE_APP_NAME }} blueCommitId=${{ steps.params.outputs.blue_commit_id }} greenCommitId=${{ steps.params.outputs.green_commit_id }} latestCommitId=${{ steps.params.outputs.commit_id }} productionLabel=${{ steps.params.outputs.cur_prod_label }} containerAppsEnvironmentName=${{ vars.AZURE_ENVIRONMENT_NAME }} containerRegistryName=${{ vars.AZURE_ACR_NAME}}'
        deploymentMode: Incremental
        failOnStdErr: true

    # Deactivate the revision that is not green or blue anymore
    - name: Deactivate unused revision
      id: deactivate
      run: |
        [[ '${{ steps.params.outputs.revision_to_deactivate }}' != 'NONE' ]] && az containerapp revision deactivate --name ${{ vars.AZURE_APP_NAME }} --resource-group ${{ vars.AZURE_RG }} --revision ${{ steps.params.outputs.revision_to_deactivate }} || echo "No revision to deactivate"
      shell: bash

    # Test current release - in a real workflow this would run a test suite against a non-production label ${{ steps.params.outputs.new_prod_label }}
    - name: Test current release
      id: test
      run: |
        result=$(curl -s https://${{ vars.AZURE_APP_NAME }}---${{ steps.params.outputs.new_prod_label }}.${{ vars.AZURE_APP_DNSSUFFIX}}/api/revision)
        if [[ $result != ${{ steps.params.outputs.commit_id }} ]]; then
          echo "Test failed"
          exit 1
        else
          echo "Test passed"
        fi
      shell: bash

    # Switch production label to the current release
    - name: switch production label
      id: switch_prod_label
      uses: azure/arm-deploy@v2
      with:
        scope: resourcegroup
        resourceGroupName: ${{ vars.AZURE_RG }}
        template: infrastructure/bicep/deploy-container-apps.bicep
        deploymentName: set-prod-label-${{ steps.params.outputs.commit_id }}
        parameters: 'bgServiceName=${{ vars.AZURE_APP_NAME }} blueCommitId=${{ steps.params.outputs.blue_commit_id }} greenCommitId=${{ steps.params.outputs.green_commit_id }} latestCommitId=${{ steps.params.outputs.commit_id }} productionLabel=${{ steps.params.outputs.new_prod_label }} containerAppsEnvironmentName=${{ vars.AZURE_ENVIRONMENT_NAME }} containerRegistryName=${{ vars.AZURE_ACR_NAME}}'
        deploymentMode: Incremental
        failOnStdErr: true
